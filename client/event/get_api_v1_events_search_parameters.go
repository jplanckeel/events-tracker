// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAPIV1EventsSearchParams creates a new GetAPIV1EventsSearchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV1EventsSearchParams() *GetAPIV1EventsSearchParams {
	return &GetAPIV1EventsSearchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV1EventsSearchParamsWithTimeout creates a new GetAPIV1EventsSearchParams object
// with the ability to set a timeout on a request.
func NewGetAPIV1EventsSearchParamsWithTimeout(timeout time.Duration) *GetAPIV1EventsSearchParams {
	return &GetAPIV1EventsSearchParams{
		timeout: timeout,
	}
}

// NewGetAPIV1EventsSearchParamsWithContext creates a new GetAPIV1EventsSearchParams object
// with the ability to set a context for a request.
func NewGetAPIV1EventsSearchParamsWithContext(ctx context.Context) *GetAPIV1EventsSearchParams {
	return &GetAPIV1EventsSearchParams{
		Context: ctx,
	}
}

// NewGetAPIV1EventsSearchParamsWithHTTPClient creates a new GetAPIV1EventsSearchParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV1EventsSearchParamsWithHTTPClient(client *http.Client) *GetAPIV1EventsSearchParams {
	return &GetAPIV1EventsSearchParams{
		HTTPClient: client,
	}
}

/*
GetAPIV1EventsSearchParams contains all the parameters to send to the API endpoint

	for the get API v1 events search operation.

	Typically these are written to a http.Request.
*/
type GetAPIV1EventsSearchParams struct {

	/* EndDate.

	   2024-01-21T12:09
	*/
	EndDate *string

	/* Priority.

	   P1
	*/
	Priority *string

	/* Service.

	   events-tracker
	*/
	Service *string

	/* Source.

	   github_action
	*/
	Source *string

	/* StartDate.

	   2024-01-21T12:09
	*/
	StartDate *string

	/* Status.

	   success
	*/
	Status *string

	/* Type.

	   deployment
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v1 events search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1EventsSearchParams) WithDefaults() *GetAPIV1EventsSearchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v1 events search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV1EventsSearchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithTimeout(timeout time.Duration) *GetAPIV1EventsSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithContext(ctx context.Context) *GetAPIV1EventsSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithHTTPClient(client *http.Client) *GetAPIV1EventsSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithEndDate(endDate *string) *GetAPIV1EventsSearchParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithPriority adds the priority to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithPriority(priority *string) *GetAPIV1EventsSearchParams {
	o.SetPriority(priority)
	return o
}

// SetPriority adds the priority to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetPriority(priority *string) {
	o.Priority = priority
}

// WithService adds the service to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithService(service *string) *GetAPIV1EventsSearchParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetService(service *string) {
	o.Service = service
}

// WithSource adds the source to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithSource(source *string) *GetAPIV1EventsSearchParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetSource(source *string) {
	o.Source = source
}

// WithStartDate adds the startDate to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithStartDate(startDate *string) *GetAPIV1EventsSearchParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithStatus adds the status to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithStatus(status *string) *GetAPIV1EventsSearchParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetStatus(status *string) {
	o.Status = status
}

// WithType adds the typeVar to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) WithType(typeVar *string) *GetAPIV1EventsSearchParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get API v1 events search params
func (o *GetAPIV1EventsSearchParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV1EventsSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Priority != nil {

		// query param priority
		var qrPriority string

		if o.Priority != nil {
			qrPriority = *o.Priority
		}
		qPriority := qrPriority
		if qPriority != "" {

			if err := r.SetQueryParam("priority", qPriority); err != nil {
				return err
			}
		}
	}

	if o.Service != nil {

		// query param service
		var qrService string

		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {

			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}
	}

	if o.Source != nil {

		// query param source
		var qrSource string

		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {

			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
